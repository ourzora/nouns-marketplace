{"mappings":"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","sources":["packages/react/checkbox/src/index.ts","packages/react/checkbox/src/Checkbox.tsx"],"sourcesContent":["export {\n  createCheckboxScope,\n  //\n  Checkbox,\n  CheckboxIndicator,\n  //\n  Root,\n  Indicator,\n} from './Checkbox';\nexport type { CheckboxProps, CheckboxIndicatorProps } from './Checkbox';\n","import * as React from 'react';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport { createContextScope } from '@radix-ui/react-context';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { useControllableState } from '@radix-ui/react-use-controllable-state';\nimport { usePrevious } from '@radix-ui/react-use-previous';\nimport { useSize } from '@radix-ui/react-use-size';\nimport { Presence } from '@radix-ui/react-presence';\nimport { Primitive } from '@radix-ui/react-primitive';\n\nimport type * as Radix from '@radix-ui/react-primitive';\nimport type { Scope } from '@radix-ui/react-context';\n\n/* -------------------------------------------------------------------------------------------------\n * Checkbox\n * -----------------------------------------------------------------------------------------------*/\n\nconst CHECKBOX_NAME = 'Checkbox';\n\ntype ScopedProps<P> = P & { __scopeCheckbox?: Scope };\nconst [createCheckboxContext, createCheckboxScope] = createContextScope(CHECKBOX_NAME);\n\ntype CheckedState = boolean | 'indeterminate';\n\ntype CheckboxContextValue = {\n  state: CheckedState;\n  disabled?: boolean;\n};\n\nconst [CheckboxProvider, useCheckboxContext] =\n  createCheckboxContext<CheckboxContextValue>(CHECKBOX_NAME);\n\ntype CheckboxElement = React.ElementRef<typeof Primitive.button>;\ntype PrimitiveButtonProps = Radix.ComponentPropsWithoutRef<typeof Primitive.button>;\ninterface CheckboxProps extends Omit<PrimitiveButtonProps, 'checked' | 'defaultChecked'> {\n  checked?: CheckedState;\n  defaultChecked?: CheckedState;\n  required?: boolean;\n  onCheckedChange?(checked: CheckedState): void;\n}\n\nconst Checkbox = React.forwardRef<CheckboxElement, CheckboxProps>(\n  (props: ScopedProps<CheckboxProps>, forwardedRef) => {\n    const {\n      __scopeCheckbox,\n      name,\n      checked: checkedProp,\n      defaultChecked,\n      required,\n      disabled,\n      value = 'on',\n      onCheckedChange,\n      ...checkboxProps\n    } = props;\n    const [button, setButton] = React.useState<HTMLButtonElement | null>(null);\n    const composedRefs = useComposedRefs(forwardedRef, (node) => setButton(node));\n    const hasConsumerStoppedPropagationRef = React.useRef(false);\n    // We set this to true by default so that events bubble to forms without JS (SSR)\n    const isFormControl = button ? Boolean(button.closest('form')) : true;\n    const [checked = false, setChecked] = useControllableState({\n      prop: checkedProp,\n      defaultProp: defaultChecked,\n      onChange: onCheckedChange,\n    });\n\n    return (\n      <CheckboxProvider scope={__scopeCheckbox} state={checked} disabled={disabled}>\n        <Primitive.button\n          type=\"button\"\n          role=\"checkbox\"\n          aria-checked={isIndeterminate(checked) ? 'mixed' : checked}\n          aria-required={required}\n          data-state={getState(checked)}\n          data-disabled={disabled ? '' : undefined}\n          disabled={disabled}\n          value={value}\n          {...checkboxProps}\n          ref={composedRefs}\n          onKeyDown={composeEventHandlers(props.onKeyDown, (event) => {\n            // According to WAI ARIA, Checkboxes don't activate on enter keypress\n            if (event.key === 'Enter') event.preventDefault();\n          })}\n          onClick={composeEventHandlers(props.onClick, (event) => {\n            setChecked((prevChecked) => (isIndeterminate(prevChecked) ? true : !prevChecked));\n            if (isFormControl) {\n              hasConsumerStoppedPropagationRef.current = event.isPropagationStopped();\n              // if checkbox is in a form, stop propagation from the button so that we only propagate\n              // one click event (from the input). We propagate changes from an input so that native\n              // form validation works and form events reflect checkbox updates.\n              if (!hasConsumerStoppedPropagationRef.current) event.stopPropagation();\n            }\n          })}\n        />\n        {isFormControl && (\n          <BubbleInput\n            control={button}\n            bubbles={!hasConsumerStoppedPropagationRef.current}\n            name={name}\n            value={value}\n            checked={checked}\n            required={required}\n            disabled={disabled}\n            // We transform because the input is absolutely positioned but we have\n            // rendered it **after** the button. This pulls it back to sit on top\n            // of the button.\n            style={{ transform: 'translateX(-100%)' }}\n          />\n        )}\n      </CheckboxProvider>\n    );\n  }\n);\n\nCheckbox.displayName = CHECKBOX_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * CheckboxIndicator\n * -----------------------------------------------------------------------------------------------*/\n\nconst INDICATOR_NAME = 'CheckboxIndicator';\n\ntype CheckboxIndicatorElement = React.ElementRef<typeof Primitive.span>;\ntype PrimitiveSpanProps = Radix.ComponentPropsWithoutRef<typeof Primitive.span>;\ninterface CheckboxIndicatorProps extends PrimitiveSpanProps {\n  /**\n   * Used to force mounting when more control is needed. Useful when\n   * controlling animation with React animation libraries.\n   */\n  forceMount?: true;\n}\n\nconst CheckboxIndicator = React.forwardRef<CheckboxIndicatorElement, CheckboxIndicatorProps>(\n  (props: ScopedProps<CheckboxIndicatorProps>, forwardedRef) => {\n    const { __scopeCheckbox, forceMount, ...indicatorProps } = props;\n    const context = useCheckboxContext(INDICATOR_NAME, __scopeCheckbox);\n    return (\n      <Presence present={forceMount || isIndeterminate(context.state) || context.state === true}>\n        <Primitive.span\n          data-state={getState(context.state)}\n          data-disabled={context.disabled ? '' : undefined}\n          {...indicatorProps}\n          ref={forwardedRef}\n          style={{ pointerEvents: 'none', ...props.style }}\n        />\n      </Presence>\n    );\n  }\n);\n\nCheckboxIndicator.displayName = INDICATOR_NAME;\n\n/* ---------------------------------------------------------------------------------------------- */\n\ntype InputProps = Radix.ComponentPropsWithoutRef<'input'>;\ninterface BubbleInputProps extends Omit<InputProps, 'checked'> {\n  checked: CheckedState;\n  control: HTMLElement | null;\n  bubbles: boolean;\n}\n\nconst BubbleInput = (props: BubbleInputProps) => {\n  const { control, checked, bubbles = true, ...inputProps } = props;\n  const ref = React.useRef<HTMLInputElement>(null);\n  const prevChecked = usePrevious(checked);\n  const controlSize = useSize(control);\n\n  // Bubble checked change to parents (e.g form change event)\n  React.useEffect(() => {\n    const input = ref.current!;\n    const inputProto = window.HTMLInputElement.prototype;\n    const descriptor = Object.getOwnPropertyDescriptor(inputProto, 'checked') as PropertyDescriptor;\n    const setChecked = descriptor.set;\n\n    if (prevChecked !== checked && setChecked) {\n      const event = new Event('click', { bubbles });\n      input.indeterminate = isIndeterminate(checked);\n      setChecked.call(input, isIndeterminate(checked) ? false : checked);\n      input.dispatchEvent(event);\n    }\n  }, [prevChecked, checked, bubbles]);\n\n  return (\n    <input\n      type=\"checkbox\"\n      aria-hidden\n      defaultChecked={isIndeterminate(checked) ? false : checked}\n      {...inputProps}\n      tabIndex={-1}\n      ref={ref}\n      style={{\n        ...props.style,\n        ...controlSize,\n        position: 'absolute',\n        pointerEvents: 'none',\n        opacity: 0,\n        margin: 0,\n      }}\n    />\n  );\n};\n\nfunction isIndeterminate(checked?: CheckedState): checked is 'indeterminate' {\n  return checked === 'indeterminate';\n}\n\nfunction getState(checked: CheckedState) {\n  return isIndeterminate(checked) ? 'indeterminate' : checked ? 'checked' : 'unchecked';\n}\n\nconst Root = Checkbox;\nconst Indicator = CheckboxIndicator;\n\nexport {\n  createCheckboxScope,\n  //\n  Checkbox,\n  CheckboxIndicator,\n  //\n  Root,\n  Indicator,\n};\nexport type { CheckboxProps, CheckboxIndicatorProps };\n"],"names":["createCheckboxScope","Checkbox","CheckboxIndicator","Root","Indicator","React","useComposedRefs","createContextScope","composeEventHandlers","useControllableState","usePrevious","useSize","Presence","Primitive","CHECKBOX_NAME","createCheckboxContext","CheckboxProvider","useCheckboxContext","forwardRef","props","forwardedRef","__scopeCheckbox","name","checked","checkedProp","defaultChecked","required","disabled","value","onCheckedChange","checkboxProps","button","setButton","useState","composedRefs","node","hasConsumerStoppedPropagationRef","useRef","isFormControl","Boolean","closest","setChecked","prop","defaultProp","onChange","isIndeterminate","getState","undefined","onKeyDown","event","key","preventDefault","onClick","prevChecked","current","isPropagationStopped","stopPropagation","transform","INDICATOR_NAME","forceMount","indicatorProps","context","state","pointerEvents","style","BubbleInput","control","bubbles","inputProps","ref","controlSize","useEffect","input","inputProto","window","HTMLInputElement","prototype","descriptor","Object","getOwnPropertyDescriptor","set","Event","indeterminate","call","dispatchEvent","position","opacity","margin"],"version":3,"file":"index.js.map"}