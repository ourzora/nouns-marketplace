{"mappings":"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","sources":["packages/react/accordion/src/index.ts","packages/react/accordion/src/Accordion.tsx"],"sourcesContent":["export {\n  createAccordionScope,\n  //\n  Accordion,\n  AccordionItem,\n  AccordionHeader,\n  AccordionTrigger,\n  AccordionContent,\n  //\n  Root,\n  Item,\n  Header,\n  Trigger,\n  Content,\n} from './Accordion';\nexport type {\n  AccordionSingleProps,\n  AccordionMultipleProps,\n  AccordionItemProps,\n  AccordionHeaderProps,\n  AccordionTriggerProps,\n  AccordionContentProps,\n} from './Accordion';\n","import React from 'react';\nimport { createContextScope } from '@radix-ui/react-context';\nimport { createCollection } from '@radix-ui/react-collection';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { useControllableState } from '@radix-ui/react-use-controllable-state';\nimport { Primitive } from '@radix-ui/react-primitive';\nimport * as CollapsiblePrimitive from '@radix-ui/react-collapsible';\nimport { createCollapsibleScope } from '@radix-ui/react-collapsible';\nimport { useId } from '@radix-ui/react-id';\n\nimport type * as Radix from '@radix-ui/react-primitive';\nimport type { Scope } from '@radix-ui/react-context';\n\n/* -------------------------------------------------------------------------------------------------\n * Accordion\n * -----------------------------------------------------------------------------------------------*/\n\nconst ACCORDION_NAME = 'Accordion';\nconst ACCORDION_KEYS = ['Home', 'End', 'ArrowDown', 'ArrowUp'];\n\nconst [Collection, useCollection, createCollectionScope] =\n  createCollection<AccordionTriggerElement>(ACCORDION_NAME);\n\ntype ScopedProps<P> = P & { __scopeAccordion?: Scope };\nconst [createAccordionContext, createAccordionScope] = createContextScope(ACCORDION_NAME, [\n  createCollectionScope,\n  createCollapsibleScope,\n]);\nconst useCollapsibleScope = createCollapsibleScope();\n\ntype AccordionElement = AccordionImplMultipleElement | AccordionImplSingleElement;\ninterface AccordionSingleProps extends AccordionImplSingleProps {\n  type: 'single';\n}\ninterface AccordionMultipleProps extends AccordionImplMultipleProps {\n  type: 'multiple';\n}\n\nconst Accordion = React.forwardRef<AccordionElement, AccordionSingleProps | AccordionMultipleProps>(\n  (props: ScopedProps<AccordionSingleProps | AccordionMultipleProps>, forwardedRef) => {\n    const { type, ...accordionProps } = props;\n    const singleProps = accordionProps as AccordionImplSingleProps;\n    const multipleProps = accordionProps as AccordionImplMultipleProps;\n    return (\n      <Collection.Provider scope={props.__scopeAccordion}>\n        {type === 'multiple' ? (\n          <AccordionImplMultiple {...multipleProps} ref={forwardedRef} />\n        ) : (\n          <AccordionImplSingle {...singleProps} ref={forwardedRef} />\n        )}\n      </Collection.Provider>\n    );\n  }\n);\n\nAccordion.displayName = ACCORDION_NAME;\n\nAccordion.propTypes = {\n  type(props) {\n    const value = props.value || props.defaultValue;\n    if (props.type && !['single', 'multiple'].includes(props.type)) {\n      return new Error(\n        'Invalid prop `type` supplied to `Accordion`. Expected one of `single | multiple`.'\n      );\n    }\n    if (props.type === 'multiple' && typeof value === 'string') {\n      return new Error(\n        'Invalid prop `type` supplied to `Accordion`. Expected `single` when `defaultValue` or `value` is type `string`.'\n      );\n    }\n    if (props.type === 'single' && Array.isArray(value)) {\n      return new Error(\n        'Invalid prop `type` supplied to `Accordion`. Expected `multiple` when `defaultValue` or `value` is type `string[]`.'\n      );\n    }\n    return null;\n  },\n};\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype AccordionValueContextValue = {\n  value: string[];\n  onItemOpen(value: string): void;\n  onItemClose(value: string): void;\n};\n\nconst [AccordionValueProvider, useAccordionValueContext] =\n  createAccordionContext<AccordionValueContextValue>(ACCORDION_NAME);\n\nconst [AccordionCollapsibleProvider, useAccordionCollapsibleContext] = createAccordionContext(\n  ACCORDION_NAME,\n  { collapsible: false }\n);\n\ntype AccordionImplSingleElement = AccordionImplElement;\ninterface AccordionImplSingleProps extends AccordionImplProps {\n  /**\n   * The controlled stateful value of the accordion item whose content is expanded.\n   */\n  value?: string;\n  /**\n   * The value of the item whose content is expanded when the accordion is initially rendered. Use\n   * `defaultValue` if you do not need to control the state of an accordion.\n   */\n  defaultValue?: string;\n  /**\n   * The callback that fires when the state of the accordion changes.\n   */\n  onValueChange?(value: string): void;\n  /**\n   * Whether an accordion item can be collapsed after it has been opened.\n   * @default false\n   */\n  collapsible?: boolean;\n}\n\nconst AccordionImplSingle = React.forwardRef<AccordionImplSingleElement, AccordionImplSingleProps>(\n  (props: ScopedProps<AccordionImplSingleProps>, forwardedRef) => {\n    const {\n      value: valueProp,\n      defaultValue,\n      onValueChange = () => {},\n      collapsible = false,\n      ...accordionSingleProps\n    } = props;\n\n    const [value, setValue] = useControllableState({\n      prop: valueProp,\n      defaultProp: defaultValue,\n      onChange: onValueChange,\n    });\n\n    return (\n      <AccordionValueProvider\n        scope={props.__scopeAccordion}\n        value={value ? [value] : []}\n        onItemOpen={setValue}\n        onItemClose={React.useCallback(() => collapsible && setValue(''), [collapsible, setValue])}\n      >\n        <AccordionCollapsibleProvider scope={props.__scopeAccordion} collapsible={collapsible}>\n          <AccordionImpl {...accordionSingleProps} ref={forwardedRef} />\n        </AccordionCollapsibleProvider>\n      </AccordionValueProvider>\n    );\n  }\n);\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype AccordionImplMultipleElement = AccordionImplElement;\ninterface AccordionImplMultipleProps extends AccordionImplProps {\n  /**\n   * The controlled stateful value of the accordion items whose contents are expanded.\n   */\n  value?: string[];\n  /**\n   * The value of the items whose contents are expanded when the accordion is initially rendered. Use\n   * `defaultValue` if you do not need to control the state of an accordion.\n   */\n  defaultValue?: string[];\n  /**\n   * The callback that fires when the state of the accordion changes.\n   */\n  onValueChange?(value: string[]): void;\n}\n\nconst AccordionImplMultiple = React.forwardRef<\n  AccordionImplMultipleElement,\n  AccordionImplMultipleProps\n>((props: ScopedProps<AccordionImplMultipleProps>, forwardedRef) => {\n  const {\n    value: valueProp,\n    defaultValue,\n    onValueChange = () => {},\n    ...accordionMultipleProps\n  } = props;\n\n  const [value = [], setValue] = useControllableState({\n    prop: valueProp,\n    defaultProp: defaultValue,\n    onChange: onValueChange,\n  });\n\n  const handleItemOpen = React.useCallback(\n    (itemValue: string) => setValue((prevValue = []) => [...prevValue, itemValue]),\n    [setValue]\n  );\n\n  const handleItemClose = React.useCallback(\n    (itemValue: string) =>\n      setValue((prevValue = []) => prevValue.filter((value) => value !== itemValue)),\n    [setValue]\n  );\n\n  return (\n    <AccordionValueProvider\n      scope={props.__scopeAccordion}\n      value={value}\n      onItemOpen={handleItemOpen}\n      onItemClose={handleItemClose}\n    >\n      <AccordionCollapsibleProvider scope={props.__scopeAccordion} collapsible={true}>\n        <AccordionImpl {...accordionMultipleProps} ref={forwardedRef} />\n      </AccordionCollapsibleProvider>\n    </AccordionValueProvider>\n  );\n});\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype AccordionImplContextValue = {\n  disabled?: boolean;\n};\n\nconst [AccordionImplProvider, useAccordionContext] =\n  createAccordionContext<AccordionImplContextValue>(ACCORDION_NAME);\n\ntype AccordionImplElement = React.ElementRef<typeof Primitive.div>;\ntype PrimitiveDivProps = Radix.ComponentPropsWithoutRef<typeof Primitive.div>;\ninterface AccordionImplProps extends PrimitiveDivProps {\n  /**\n   * Whether or not an accordion is disabled from user interaction.\n   *\n   * @defaultValue false\n   */\n  disabled?: boolean;\n}\n\nconst AccordionImpl = React.forwardRef<AccordionImplElement, AccordionImplProps>(\n  (props: ScopedProps<AccordionImplProps>, forwardedRef) => {\n    const { __scopeAccordion, disabled, ...accordionProps } = props;\n    const accordionRef = React.useRef<AccordionImplElement>(null);\n    const composedRefs = useComposedRefs(accordionRef, forwardedRef);\n    const getItems = useCollection(__scopeAccordion);\n\n    const handleKeyDown = composeEventHandlers(props.onKeyDown, (event) => {\n      if (!ACCORDION_KEYS.includes(event.key)) return;\n      const target = event.target as HTMLElement;\n      const triggerCollection = getItems().filter((item) => !item.ref.current?.disabled);\n      const triggerIndex = triggerCollection.findIndex((item) => item.ref.current === target);\n      const triggerCount = triggerCollection.length;\n\n      if (triggerIndex === -1) return;\n\n      // Prevents page scroll while user is navigating\n      event.preventDefault();\n\n      let nextIndex = triggerIndex;\n      switch (event.key) {\n        case 'Home':\n          nextIndex = 0;\n          break;\n        case 'End':\n          nextIndex = triggerCount - 1;\n          break;\n        case 'ArrowDown':\n          nextIndex = triggerIndex + 1;\n          break;\n        case 'ArrowUp':\n          nextIndex = triggerIndex - 1;\n          if (nextIndex < 0) {\n            nextIndex = triggerCount - 1;\n          }\n          break;\n      }\n\n      const clampedIndex = nextIndex % triggerCount;\n      triggerCollection[clampedIndex].ref.current?.focus();\n    });\n\n    return (\n      <AccordionImplProvider scope={__scopeAccordion} disabled={disabled}>\n        <Collection.Slot scope={__scopeAccordion}>\n          <Primitive.div\n            {...accordionProps}\n            ref={composedRefs}\n            onKeyDown={disabled ? undefined : handleKeyDown}\n          />\n        </Collection.Slot>\n      </AccordionImplProvider>\n    );\n  }\n);\n\n/* -------------------------------------------------------------------------------------------------\n * AccordionItem\n * -----------------------------------------------------------------------------------------------*/\n\nconst ITEM_NAME = 'AccordionItem';\n\ntype AccordionItemContextValue = { open?: boolean; disabled?: boolean; triggerId: string };\nconst [AccordionItemProvider, useAccordionItemContext] =\n  createAccordionContext<AccordionItemContextValue>(ITEM_NAME);\n\ntype AccordionItemElement = React.ElementRef<typeof CollapsiblePrimitive.Root>;\ntype CollapsibleProps = Radix.ComponentPropsWithoutRef<typeof CollapsiblePrimitive.Root>;\ninterface AccordionItemProps\n  extends Omit<CollapsibleProps, 'open' | 'defaultOpen' | 'onOpenChange'> {\n  /**\n   * Whether or not an accordion item is disabled from user interaction.\n   *\n   * @defaultValue false\n   */\n  disabled?: boolean;\n  /**\n   * A string value for the accordion item. All items within an accordion should use a unique value.\n   */\n  value: string;\n}\n\n/**\n * `AccordionItem` contains all of the parts of a collapsible section inside of an `Accordion`.\n */\nconst AccordionItem = React.forwardRef<AccordionItemElement, AccordionItemProps>(\n  (props: ScopedProps<AccordionItemProps>, forwardedRef) => {\n    const { __scopeAccordion, value, ...accordionItemProps } = props;\n    const accordionContext = useAccordionContext(ITEM_NAME, __scopeAccordion);\n    const valueContext = useAccordionValueContext(ITEM_NAME, __scopeAccordion);\n    const collapsibleScope = useCollapsibleScope(__scopeAccordion);\n    const triggerId = useId();\n    const open = (value && valueContext.value.includes(value)) || false;\n    const disabled = accordionContext.disabled || props.disabled;\n\n    return (\n      <AccordionItemProvider\n        scope={__scopeAccordion}\n        open={open}\n        disabled={disabled}\n        triggerId={triggerId}\n      >\n        <CollapsiblePrimitive.Root\n          data-state={open ? 'open' : 'closed'}\n          {...collapsibleScope}\n          {...accordionItemProps}\n          ref={forwardedRef}\n          disabled={disabled}\n          open={open}\n          onOpenChange={(open) => {\n            if (open) {\n              valueContext.onItemOpen(value);\n            } else {\n              valueContext.onItemClose(value);\n            }\n          }}\n        />\n      </AccordionItemProvider>\n    );\n  }\n);\n\nAccordionItem.displayName = ITEM_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * AccordionHeader\n * -----------------------------------------------------------------------------------------------*/\n\nconst HEADER_NAME = 'AccordionHeader';\n\ntype AccordionHeaderElement = React.ElementRef<typeof Primitive.h3>;\ntype PrimitiveHeading3Props = Radix.ComponentPropsWithoutRef<typeof Primitive.h3>;\ninterface AccordionHeaderProps extends PrimitiveHeading3Props {}\n\n/**\n * `AccordionHeader` contains the content for the parts of an `AccordionItem` that will be visible\n * whether or not its content is collapsed.\n */\nconst AccordionHeader = React.forwardRef<AccordionHeaderElement, AccordionHeaderProps>(\n  (props: ScopedProps<AccordionHeaderProps>, forwardedRef) => {\n    const { __scopeAccordion, ...headerProps } = props;\n    const itemContext = useAccordionItemContext(HEADER_NAME, __scopeAccordion);\n    return (\n      <Primitive.h3\n        data-state={getState(itemContext.open)}\n        data-disabled={itemContext.disabled ? '' : undefined}\n        {...headerProps}\n        ref={forwardedRef}\n      />\n    );\n  }\n);\n\nAccordionHeader.displayName = HEADER_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * AccordionTrigger\n * -----------------------------------------------------------------------------------------------*/\n\nconst TRIGGER_NAME = 'AccordionTrigger';\n\ntype AccordionTriggerElement = React.ElementRef<typeof CollapsiblePrimitive.Trigger>;\ntype CollapsibleTriggerProps = Radix.ComponentPropsWithoutRef<typeof CollapsiblePrimitive.Trigger>;\ninterface AccordionTriggerProps extends CollapsibleTriggerProps {}\n\n/**\n * `AccordionTrigger` is the trigger that toggles the collapsed state of an `AccordionItem`. It\n * should always be nested inside of an `AccordionHeader`.\n */\nconst AccordionTrigger = React.forwardRef<AccordionTriggerElement, AccordionTriggerProps>(\n  (props: ScopedProps<AccordionTriggerProps>, forwardedRef) => {\n    const { __scopeAccordion, ...triggerProps } = props;\n    const itemContext = useAccordionItemContext(TRIGGER_NAME, __scopeAccordion);\n    const collapsibleContext = useAccordionCollapsibleContext(TRIGGER_NAME, __scopeAccordion);\n    const collapsibleScope = useCollapsibleScope(__scopeAccordion);\n    return (\n      <Collection.ItemSlot scope={__scopeAccordion}>\n        <CollapsiblePrimitive.Trigger\n          aria-disabled={(itemContext.open && !collapsibleContext.collapsible) || undefined}\n          id={itemContext.triggerId}\n          {...collapsibleScope}\n          {...triggerProps}\n          ref={forwardedRef}\n        />\n      </Collection.ItemSlot>\n    );\n  }\n);\n\nAccordionTrigger.displayName = TRIGGER_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * AccordionContent\n * -----------------------------------------------------------------------------------------------*/\n\nconst CONTENT_NAME = 'AccordionContent';\n\ntype AccordionContentElement = React.ElementRef<typeof CollapsiblePrimitive.Content>;\ntype CollapsibleContentProps = Radix.ComponentPropsWithoutRef<typeof CollapsiblePrimitive.Content>;\ninterface AccordionContentProps extends CollapsibleContentProps {}\n\n/**\n * `AccordionContent` contains the collapsible content for an `AccordionItem`.\n */\nconst AccordionContent = React.forwardRef<AccordionContentElement, AccordionContentProps>(\n  (props: ScopedProps<AccordionContentProps>, forwardedRef) => {\n    const { __scopeAccordion, ...contentProps } = props;\n    const itemContext = useAccordionItemContext(CONTENT_NAME, __scopeAccordion);\n    const collapsibleScope = useCollapsibleScope(__scopeAccordion);\n    return (\n      <CollapsiblePrimitive.Content\n        role=\"region\"\n        aria-labelledby={itemContext.triggerId}\n        {...collapsibleScope}\n        {...contentProps}\n        ref={forwardedRef}\n        style={{\n          ['--radix-accordion-content-height' as any]: 'var(--radix-collapsible-content-height)',\n          ['--radix-accordion-content-width' as any]: 'var(--radix-collapsible-content-width)',\n          ...props.style,\n        }}\n      />\n    );\n  }\n);\n\nAccordionContent.displayName = CONTENT_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\nfunction getState(open?: boolean) {\n  return open ? 'open' : 'closed';\n}\n\nconst Root = Accordion;\nconst Item = AccordionItem;\nconst Header = AccordionHeader;\nconst Trigger = AccordionTrigger;\nconst Content = AccordionContent;\n\nexport {\n  createAccordionScope,\n  //\n  Accordion,\n  AccordionItem,\n  AccordionHeader,\n  AccordionTrigger,\n  AccordionContent,\n  //\n  Root,\n  Item,\n  Header,\n  Trigger,\n  Content,\n};\nexport type {\n  AccordionSingleProps,\n  AccordionMultipleProps,\n  AccordionItemProps,\n  AccordionHeaderProps,\n  AccordionTriggerProps,\n  AccordionContentProps,\n};\n"],"names":["createAccordionScope","Accordion","AccordionItem","AccordionHeader","AccordionTrigger","AccordionContent","Root","Item","Header","Trigger","Content","React","createContextScope","createCollection","useComposedRefs","composeEventHandlers","useControllableState","Primitive","CollapsiblePrimitive","createCollapsibleScope","useId","ACCORDION_NAME","ACCORDION_KEYS","Collection","useCollection","createCollectionScope","createAccordionContext","useCollapsibleScope","forwardRef","props","forwardedRef","type","accordionProps","singleProps","multipleProps","__scopeAccordion","propTypes","value","defaultValue","includes","Error","Array","isArray","AccordionValueProvider","useAccordionValueContext","AccordionCollapsibleProvider","useAccordionCollapsibleContext","collapsible","AccordionImplSingle","valueProp","onValueChange","accordionSingleProps","setValue","prop","defaultProp","onChange","useCallback","AccordionImplMultiple","accordionMultipleProps","handleItemOpen","itemValue","prevValue","handleItemClose","filter","AccordionImplProvider","useAccordionContext","AccordionImpl","disabled","accordionRef","useRef","composedRefs","getItems","handleKeyDown","onKeyDown","event","key","target","triggerCollection","item","ref","current","triggerIndex","findIndex","triggerCount","length","preventDefault","nextIndex","clampedIndex","focus","undefined","ITEM_NAME","AccordionItemProvider","useAccordionItemContext","accordionItemProps","accordionContext","valueContext","collapsibleScope","triggerId","open","onItemOpen","onItemClose","HEADER_NAME","headerProps","itemContext","getState","TRIGGER_NAME","triggerProps","collapsibleContext","CONTENT_NAME","contentProps","style"],"version":3,"file":"index.js.map"}