import { vars } from './theme'
import { createSprinkles, defineProperties } from '@vanilla-extract/sprinkles'

// TODO: This is to be fixed, we would rather define the breakpoints as an array of numbers and generate this object
const conditions = {
  '@initial': {},
  '@480': { '@media': '(min-width: 480px)' },
  '@576': { '@media': '(min-width: 576px)' },
  '@768': { '@media': '(min-width: 768px)' },
  '@1024': { '@media': '(min-width: 1024px)' },
  '@1440': { '@media': '(min-width: 1440px)' },
} as const

const responsiveProperties = defineProperties({
  defaultCondition: '@initial',
  conditions,
  responsiveArray: ['@initial', '@480', '@576', '@768', '@1024', '@1440'],
  properties: {
    display: ['none', 'flex', 'block', 'inline-block', 'grid', 'inline', 'inline-flex'],
    position: ['relative', 'absolute', 'fixed', 'sticky'],
    alignSelf: ['auto', 'flex-start', 'flex-end', 'center', 'baseline', 'stretch'],
    justifySelf: ['auto', 'flex-start', 'flex-end', 'center', 'baseline', 'stretch'],
    flexDirection: ['row', 'row-reverse', 'column', 'column-reverse'],
    justifyContent: [
      'stretch',
      'flex-start',
      'center',
      'flex-end',
      'space-around',
      'space-between',
    ],
    alignItems: [
      'stretch',
      'start',
      'end',
      'baseline',
      'flex-start',
      'center',
      'flex-end',
    ],
    placeItems: ['center'],
    userSelect: ['none'],
    flexWrap: ['wrap', 'wrap-reverse', 'nowrap'],
    flex: ['none', 0, 1, 2, 3, 4, 5, 6],
    flexShrink: [0],
    fontSize: vars.fontSize,
    lineHeight: vars.lineHeight,
    fontWeight: vars.fontWeight,
    textAlign: ['left', 'center', 'right', 'start', 'end', 'justify', 'match-parent'],
    textDecoration: ['underline', 'none'],
    gap: vars.space,
    top: vars.space,
    left: vars.space,
    bottom: vars.space,
    right: vars.space,
    paddingTop: vars.space,
    paddingBottom: vars.space,
    paddingLeft: vars.space,
    paddingRight: vars.space,
    marginTop: vars.space,
    marginBottom: vars.space,
    marginLeft: vars.space,
    marginRight: vars.space,
    width: vars.size,
    height: vars.size,
    minWidth: vars.size,
    minHeight: vars.size,
    maxWidth: vars.size,
    maxHeight: vars.size,
    inset: vars.space,
    objectFit: ['fill', 'contain', 'cover', 'none', 'scale-down'],
    overflow: ['visible', 'scroll', 'hidden', 'auto'],
    overflowY: ['visible', 'scroll', 'hidden', 'auto'],
    overflowX: ['visible', 'scroll', 'hidden', 'auto'],
    pointerEvents: ['none', 'all', 'auto', 'initial'],
    textTransform: ['none', 'uppercase', 'lowercase', 'capitalize'],
    boxShadow: vars.shadows,
    cursor: ['auto', 'pointer', 'not-allowed'],
    backgroundSize: ['auto', 'contain', 'cover', 'inherit', 'initial', 'revert', 'unset'],
    gridAutoRows: ['auto'],
    gridAutoColumns: ['auto'],
    wordBreak: ['break-word', 'break-all', 'keep-all', 'normal'],
    listStyle: ['none'],
    whiteSpace: [
      'normal',
      'nowrap',
      'pre',
      'pre-wrap',
      'pre-line',
      'break-spaces',
      'inherit',
      'inherit',
      'revert',
      'unset',
    ],
  },
  shorthands: {
    minW: ['minWidth'],
    minH: ['minHeight'],
    maxW: ['maxWidth'],
    maxH: ['maxHeight'],
    margin: ['marginTop', 'marginBottom', 'marginLeft', 'marginRight'],
    m: ['marginTop', 'marginBottom', 'marginLeft', 'marginRight'],
    mx: ['marginLeft', 'marginRight'],
    my: ['marginTop', 'marginBottom'],
    mt: ['marginTop'],
    mb: ['marginBottom'],
    ml: ['marginLeft'],
    mr: ['marginRight'],
    pos: ['position'],
    padding: ['paddingTop', 'paddingBottom', 'paddingLeft', 'paddingRight'],
    p: ['paddingTop', 'paddingBottom', 'paddingLeft', 'paddingRight'],
    px: ['paddingLeft', 'paddingRight'],
    py: ['paddingTop', 'paddingBottom'],
    pt: ['paddingTop'],
    pb: ['paddingBottom'],
    pl: ['paddingLeft'],
    pr: ['paddingRight'],
    shadow: ['boxShadow'],
    w: ['width'],
    h: ['height'],
    t: ['top'],
    l: ['left'],
    b: ['bottom'],
    r: ['right'],
    size: ['width', 'height'],
  },
})

const unconditionalProperties = defineProperties({
  properties: {
    color: vars.color,
    backgroundColor: vars.color,
    borderRadius: vars.radii,
    borderColor: vars.color,
    borderStyle: vars.border.style,
    borderWidth: vars.border.width,
    fontFamily: vars.fonts,
  },
})

export const atoms = createSprinkles(unconditionalProperties, responsiveProperties)

export type Atoms = Parameters<typeof atoms>[0]
